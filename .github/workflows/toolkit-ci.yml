name: toolkit CI
on: pull_request

jobs:
  tests:
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - name: Crete minio service
      run: |
        mkdir -p $HOME/minio_data/storage
        /usr/bin/docker create --name minio -p 9000:9000 -e "MINIO_ACCESS_KEY=minio" -e "MINIO_SECRET_KEY=minio123" -e GITHUB_ACTIONS=true -e CI=true -v $HOME/minio_data:/data minio/minio server /data
        /usr/bin/docker start minio
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - uses: actions/cache@v1
      with:
        path: ~/venv
        key: ${{ runner.os }}-venv-${{ hashFiles('*requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-venv-
    - name: setup virtualenv
      run: |
        python -m venv ~/venv
    - name: Install dependencies
      run: |
        source ~/venv/bin/activate
        pip install -r dev-requirements.txt -r requirements.txt
    - name: Run toolkit tests
      run: |
        source ~/venv/bin/activate
        ./runtests.sh
      env:
        TEST_DATABASE_URL: postgres://postgres:postgres@localhost:${{ job.services.postgres.ports['5432'] }}/postgres
        TEST_AWS_ACCESS_KEY_ID: minio
        TEST_AWS_SECRET_ACCESS_KEY: minio123
        TEST_AWS_ENDPOINT_URL: http://localhost:9000/
